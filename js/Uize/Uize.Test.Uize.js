/*
	UIZE JAVASCRIPT FRAMEWORK 2011-05-31

	http://www.uize.com/reference/Uize.Test.Uize.html
	Available under MIT License or GNU General Public License -- http://www.uize.com/license.html
*/
Uize.module({name:'Uize.Test.Uize',required:'Uize.Data',builder:function(){var _a={undefinedValue:undefined,nullValue:null,emptyString:'',nonEmptyString:'solar',numberValueZero:0,numberValueNegative:-1,numberValuePositive:1,numberValueNaN:NaN,numberValueInfinity:Infinity,numberValueNegativeInfinity:-Infinity,booleanFalse:false,booleanTrue:true},_b=[undefined,null,'','solar',0,-1,1,NaN,Infinity,-Infinity,false,true],_c={anObject:_a,anArray:_b},_d=[_a,_b];function _e(_f,_g,_h){return{title:_f,test:function(){var _i=new _g(_h),_j=Uize.clone(_i);return(this.expect(true,_j!=_i)&&this.expectSameAs(_i.constructor,_j.constructor)&&this.expect(_i.valueOf(),_j.valueOf()));}};}function _k(_f,_l){function _m(){return _l?new Uize:Uize.subclass();}return{title:_f,test:[{title:'Test that firing an event for which no handler is registered has no ill effect',test:function(){_m().fire('testEvent');return true;}},{title:'Test that firing an event for which a handler is registered works correctly',test:function(){var _n=false,
_o=_m();_o.wire('testEvent',function(){_n=true});_o.fire('testEvent');return _n;}},{title:'Test that an event handler function receives a single object parameter, and that this event object contains a name property whose value matches the name of the fired event',test:function(){var _n=false,_o=_m();_o.wire('testEvent',function(_p){_n=arguments.length==1&&typeof _p=='object'&&_p&&_p.name=='testEvent';});_o.fire('testEvent');return _n;}},{title:'Test that the event object provided to an event handler has a source property, whose value is a reference to the object on which the event was fired',test:function(){var _n=false,_o=_m();_o.wire('testEvent',function(_p){_n=_p.source===_o});_o.fire('testEvent');return _n;}},{title:'Test that firing an event for which two handlers are registered results in the handlers being exucuted in the order registered',test:function(){var _q=[],_o=_m();_o.wire('testEvent',function(){_q.push('handler1')});_o.wire('testEvent',function(){_q.push('handler2')});_o.fire('testEvent');
return _q+''=='handler1,handler2';}},{title:'Test that firing an event for which more than two handlers are registered results in the handlers being exucuted in the order registered',test:function(){var _q=[],_o=_m();_o.wire('testEvent',function(){_q.push('handler1')});_o.wire('testEvent',function(){_q.push('handler2')});_o.wire('testEvent',function(){_q.push('handler3')});_o.wire('testEvent',function(){_q.push('handler4')});_o.fire('testEvent');return _q+''=='handler1,handler2,handler3,handler4';}},{title:'Test that firing an event using the alternate event object form is handled correctly',test:function(){var _n=false,_o=_m();_o.wire('testEvent',function(){_n=true});_o.fire({name:'testEvent'});return _n;}},{title:'Test that extra event object properties that are specified when firing an event are accessible on the event object in the handler',test:function(){var _n=false,_o=_m();_o.wire('testEvent',function(_p){_n=_p.foo=='bar'&&_p.hello=='world'});_o.fire({name:'testEvent',foo:'bar',hello:'world'});
return _n;}},{title:'Test that the same event object is passed to all handlers for an event and is also returned as the result of the fire method',test:function(){var _o=_m(),_r,_s;_o.wire('testEvent',function(_p){_r=_p;_p.foo='bar';});_o.wire('testEvent',function(_p){_s=_p;_p.hello='world';});var _p=_o.fire('testEvent');return(_p==_r&&_p==_s&&_p.foo=='bar'&&_p.hello=='world');}},{title:'Test that unwiring an event handler results in that handler no longer being executed',test:function(){var _n=false,_o=_m();function _t(){_n= !_n}_o.wire('testEvent',_t);_o.fire('testEvent');_o.unwire('testEvent',_t);_o.fire('testEvent');return _n;}},{title:'Test that the special wildcard event name results in the handler being executed for all events, and that it can be unwired successfully',test:function(){var _u='testEvent1,testEvent2,testEvent3',_v=[],_w=[],_x=[],_o=_m();function _y(_p){_v.push(_p.name)}function _z(_p){_w.push(_p.name)}function _A(_p){_x.push(_p.name)}_o.wire('*',_y);_o.wire('*',_z);_o.wire('*',_A);
_o.fire('testEvent1');_o.fire('testEvent2');_o.fire('testEvent3');_o.unwire('*',_y);_o.unwire('*',_z);_o.unwire('*',_A);_o.fire('testEvent1');_o.fire('testEvent2');_o.fire('testEvent3');return(_v+''==_u&&_w+''==_u&&_x+''==_u);}},{title:'Test that when the second of three event handlers is unwired, the execution order of the remaining two handlers is preserved',test:function(){var _q=[],_o=_m();_o.wire('testEvent',function(){_q.push('handler1')});function _z(){_q.push('handler2')}_o.wire('testEvent',_z);_o.wire('testEvent',function(){_q.push('handler3')});_o.unwire('testEvent',_z);_o.fire('testEvent');return _q+''=='handler1,handler3';}},{title:'Test that wiring handlers for multiple different events using the event-names-to-handlers map is handled correctly',test:function(){var _B,_C,_D,_o=_m();_o.wire({testEvent1:function(){_B=true},testEvent2:function(){_C=true},testEvent3:function(){_D=true}});_o.fire('testEvent1');_o.fire('testEvent2');_o.fire('testEvent3');return _B&&_C&&_D;}},{title:
'Test that unwiring handlers for multiple different events using the event-names-to-handlers map is handled correctly',test:function(){var _E=false,_F=false,_G=false,_o=_m();function _H(){_o.fire('testEvent1');_o.fire('testEvent2');_o.fire('testEvent3');}var _I={testEvent1:function(){_E= !_E},testEvent2:function(){_F= !_F},testEvent3:function(){_G= !_G}};_o.wire(_I);_H();_o.unwire(_I);_H();return _E&&_F&&_G;}},{title:'Test that not specifying a handler when unwiring an event results in all handlers for that event being unwired',test:function(){var _J=false,_K=false,_L=false,_o=_m();_o.wire('testEvent',function(){_J= !_J});_o.wire('testEvent',function(){_K= !_K});_o.wire('testEvent',function(){_L= !_L});_o.fire('testEvent');_o.unwire('testEvent');_o.fire('testEvent');return _J&&_K&&_L;}},{title:'Test that unwiring a handler for the special wildcard event results in just that handler being unwired, rather than all handlers for the wildcard event or all handlers for all events',test:function(){var _q=[],_o=_m();
function _y(){_q.push('handler1')}_o.wire('*',_y);_o.wire('*',function(){_q.push('handler2')});_o.wire('testEvent',function(){_q.push('handler3')});_o.fire('testEvent');_o.unwire('*',_y);_o.fire('testEvent');return _q+''=='handler1,handler2,handler3,handler2,handler3';}},_l?{title:'Test that event bubbling works correctly for instances',test:[{title:'Test that setting the bubble event property to true when firing an event on an instance with no parent is not fatal and results in a handler wired for that event being executed',test:function(){var _o=_m(),_n=false;_o.wire('testEvent',function(){_n=true});_o.fire({name:'testEvent',bubble:true});return _n;}},{title:'Test that setting the bubble event property to true when firing an event on an instance with a parent causes that event to fire first on the instance and then on its parent',test:function(){var _q=[],_o=_m(),_M=_m();_o.parent=_M;_o.wire('testEvent',function(){_q.push('sourceHandler')});_M.wire('testEvent',function(){_q.push('sourceParentHandler')});
_o.fire({name:'testEvent',bubble:true});return _q+''=='sourceHandler,sourceParentHandler';}},{title:'Test that a bubbling event is fired on all instances up the parent chain',test:function(){var _q=[],_o=_m(),_M=_m(),_N=_m(),_u=['sourceHandler','sourceParentHandler','sourceParentParentHandler'];_o.parent=_M;_M.parent=_N;_o.wire('testEvent',function(){_q.push(_u[0])});_M.wire('testEvent',function(){_q.push(_u[1])});_N.wire('testEvent',function(){_q.push(_u[2])});_o.fire({name:'testEvent',bubble:true});return _q+''==_u+'';}},{title:'Test that the event object provided to all handlers of a bubbling event up the parent chain is the same event object',test:function(){var _o=_m(),_M=_m(),_N=_m(),_O,_P,_Q,_R={name:'testEvent',bubble:true};_o.parent=_M;_M.parent=_N;_o.wire('testEvent',function(_p){_O=_p;_p.foo='bar';});_M.wire('testEvent',function(_p){_P=_p;_p.hello='world';});_N.wire('testEvent',function(_p){_Q=_p;_p.duck='typing';});var _p=_o.fire(_R);return(_p==_R&&_O==_R&&_P==_R&&_Q==_R&&
_p.foo=='bar'&&_p.hello=='world'&&_p.duck=='typing');}},{title:'Test that a bubbling event can be canceled by a handler of the bubbled event, so that it will not be fired on a higher parent',test:function(){var _q=[],_o=_m(),_M=_m(),_N=_m();_o.parent=_M;_M.parent=_N;_o.wire('testEvent',function(){_q.push('sourceHandler')});_M.wire('testEvent',function(_p){_q.push('sourceParentHandler');_p.bubble=false;});_N.wire('testEvent',function(){_q.push('sourceParentParentHandler')});_o.fire({name:'testEvent',bubble:true});return _q+''=='sourceHandler,sourceParentHandler';}},{title:'Test that the event object for a bubbling event always has the instance on which the event was originally fired as the value for the source property',test:function(){var _o=_m(),_M=_m(),_N=_m(),_S,_T,_U;_o.parent=_M;_M.parent=_N;_o.wire('testEvent',function(_p){_S=_p.source});_M.wire('testEvent',function(_p){_T=_p.source});_N.wire('testEvent',function(_p){_U=_p.source});_o.fire({name:'testEvent',bubble:true});return(_S==_o&&_T==_o&&_U==_o);}
}]}:{title:'Test that event bubbling is ignored for classes',test:[{title:'Test that setting the bubble event property to true when firing an event on a class with no parent (as it should be) is not fatal and results in a handler wired for that event being executed',test:function(){var _o=_m(),_n=false;_o.wire('testEvent',function(){_n=true});_o.fire({name:'testEvent',bubble:true});return _n;}},{title:'Test that setting the bubble event property to true when firing an event on a class with a parent (which is not exactly valid) is not fatal and results in a handler wired for that event being executed',test:function(){var _q=[],_o=_m(),_M=_m();_o.parent=_M;_o.wire('testEvent',function(){_q.push('sourceHandler')});_M.wire('testEvent',function(){_q.push('sourceParentHandler')});_o.fire({name:'testEvent',bubble:true});return _q+''=='sourceHandler';}}]}]};}return Uize.Test.declare({title:'Test for Uize Base Class',test:[Uize.Test.staticMethodsTest([['Uize.capFirstChar',[
['Many letters, first letter is lowercase','hello','Hello'],['Many letters, first letter is uppercase','Hello','Hello'],['Single letter, lowercase','h','H'],['Single letter, uppercase','H','H'],['Empty string','','']]],['Uize.constrain',[['Test that constraining a value that is lower than the lower limit returns the lower limit',[-20,-10,10],-10],['Test that constraining a value that is equal to the lower limit returns that value',[-10,-10,10],-10],['Test that constraining a value that is higher than the upper limit returns the upper limit',[20,-10,10],10],['Test that constraining a value that is equal to the upper limit returns that value',[10,-10,10],10],['Test that constraining value that is within the range simply returns that value',[1,-10,10],1],['Test that, when the range is reversed, constraining a value that is lower than the lower limit returns the lower limit',[-20,10,-10],-10],['Test that, when the range is reversed, constraining a value that is equal to the lower limit returns that value',
[-10,10,-10],-10],['Test that, when the range is reversed, constraining a value that is higher than the upper limit returns the upper limit',[20,10,-10],10],['Test that, when the range is reversed, constraining a value that is equal to the upper limit returns that value',[10,10,-10],10],['Test that, when the range is reversed, constraining value that is within the range simply returns that value',[1,10,-10],1],['Test that, when the lower limit and the upper limit are equal, constraining a value that is lower than the lower limit returns the lower limit',[5,10,10],10],['Test that, when the lower limit and the upper limit are equal, constraining a value that is higher than the upper limit returns the upper limit',[15,10,10],10]]],['Uize.isArray',[['Test that calling with no parameters returns false',[],false],['Test that the value undefined is not regarded as an array',undefined,false],['Test that the value null is not regarded as an array',null,false],
['Test that a string type value is not regarded as an array','hello',false],['Test that a String object instance is not regarded as an array',new String('hello'),false],['Test that a number type value is not regarded as an array',5,false],['Test that a Number object instance is not regarded as an array',new Number(5),false],['Test that a boolean type value is not regarded as an array',true,false],['Test that a Boolean object instance is not regarded as an array',new Boolean(true),false],['Test that an empty object is not regarded as an array',{},false],['Test that a function is not regarded as an array',function(){},false],['Test that a regular expression instance is not regarded as an array',/\d+/,false],['Test that an empty array is regarded as an array',[[]],true],['Test that an array with elements is regarded as an array',[[1,2,3,4]],true]]],['Uize.isNumber',[['Test that calling with no parameters returns false',[],false],['Test that the value undefined is not regarded as a number',undefined,false],
['Test that the value null is not regarded as a number',null,false],['Test that a number format string type value is not regarded as a number','5',false],['Test that a number format String object instance is not regarded as a number',new String('5'),false],['Test that a boolean type value is not regarded as a number',true,false],['Test that a Boolean object instance is not regarded as a number',new Boolean(true),false],['Test that an object is not regarded as a number',{},false],['Test that an array is not regarded as a number',[[]],false],['Test that a function is not regarded as a number',function(){},false],['Test that a regular expression instance is not regarded as a number',/\d+/,false],['Test that a number type value is regarded as a number',5,true],['Test that the special value Infinity is regarded as a number',Infinity,true],['Test that the special value -Infinity is regarded as a number',-Infinity,true],['Test that the special value NaN is not regarded as a number',NaN,false],
['Test that a Number object instance is not regarded as a number',new Number(5),false]]],['Uize.escapeRegExpLiteral',[['Test that all of the regular expression special characters are escaped correctly','^$|{}[]()?.*+\\','\\^\\$\\|\\{\\}\\[\\]\\(\\)\\?\\.\\*\\+\\\\']]],['Uize.copyInto',[['Test that calling with only a target object and no source object results in the target object being returned unchanged',{foo:'bar',hello:'world'},{foo:'bar',hello:'world'}],['Test that specifying the value null for the source object results in the target object being returned unchanged',[{foo:'bar',hello:'world'},null],{foo:'bar',hello:'world'}],['Test that specifying the value undefined for the source object results in the target object being returned unchanged',[{foo:'bar',hello:'world'},undefined],{foo:'bar',hello:'world'}],['Test that copying a source object into a target object works correctly',[{foo:'foo',hello:'there',otherInTarget:'blah'},{foo:'bar',hello:'world',otherInSource:'yawn'}],
{foo:'bar',hello:'world',otherInTarget:'blah',otherInSource:'yawn'}],{title:'Test that the target object is returned and not a new object',test:function(){var _V={foo:'bar'};var _W=Uize.copyInto(_V,{hello:'world'});return this.expectSameAs(_V,_W);}},['Test that an arbitrary number of source objects is supported',[{propFromTarget:'foo'},{propFromSource1:'bar'},{propFromSource2:'hello'},{propFromSource3:'world'}],{propFromTarget:'foo',propFromSource1:'bar',propFromSource2:'hello',propFromSource3:'world'}],['Test that the contents of source objects are copied into the target in the order in which the source objects are specified',[{foo:'foo',otherInTarget:'blah'},{foo:'bar',fancy:'pants'},{fancy:'schmancy',la:'dee dah'},{la:'dolce vita',fin:'ished'}],{foo:'bar',otherInTarget:'blah',fancy:'schmancy',la:'dolce vita',fin:'ished'}],['Test that specifying the value null or undefined for all of the source objects results in the target object being returned unchanged',
[{foo:'bar',hello:'world'},null,undefined,undefined,null],{foo:'bar',hello:'world'}],['Test that specifying the value null for the target object results in the value null being returned',[null,{foo:'bar',hello:'world'}],null],['Test that specifying the value undefined for the target object results in the value null being returned',[undefined,{foo:'bar',hello:'world'}],undefined]],null,{cloneArguments:true}],['Uize.pairUp',[['Test that calling with no parameters returns {undefined:undefined}',[],{undefined:undefined}],['Test that undefined is the default for the valueANYTYPE parameter',['key'],{key:undefined}],['Test that the key can be a string','key',{key:undefined}],['Test that the key can be a number',5,{5:undefined}],['Test that the key can be the special value Infinity',Infinity,{Infinity:undefined}],['Test that the key can be the special value NaN',NaN,{NaN:undefined}],['Test that the key can be a boolean',false,{'false':undefined}],['Test that the key can be undefined',undefined,{undefined:undefined}],
['Test that the key can be null',null,{'null':undefined}],['Test that the value can be a string',['key','value'],{key:'value'}],['Test that the value can be a number',['key',5],{key:5}],['Test that the value can be the special value Infinity',['key',Infinity],{key:Infinity}],['Test that the value can be the special value NaN',['key',NaN],{key:NaN}],['Test that the value can be a boolean',['key',false],{key:false}],['Test that the value can be undefined',['key',undefined],{key:undefined}],['Test that the value can be null',['key',null],{key:null}],['Test that the value can be an object',['key',{propName:'propValue'}],{key:{propName:'propValue'}}],['Test that an arbitrary number of arguments is supported',['string','foo','number',42,'boolean',false,'regexp',/\d+/,'undefined',undefined,'null',null,'NaN',NaN,'object',{},'array',[]],{'string':'foo','number':42,'boolean':false,'regexp':/\d+/,'undefined':undefined,'null':null,'NaN':NaN,'object':{},'array':[]}],
['Test that if there is only one argument whose value is an array, then that array is treated as the arguments list',[['string','foo','number',42,'boolean',false,'regexp',/\d+/,'undefined',undefined,'null',null,'NaN',NaN,'object',{},'array',[]]],{'string':'foo','number':42,'boolean':false,'regexp':/\d+/,'undefined':undefined,'null':null,'NaN':NaN,'object':{},'array':[]}]]],['Uize.substituteInto',[['Test that calling with no parameters produces an empty string',[],''],['Test that calling with just a source string simply produces that string','Hello, world!','Hello, world!'],['Test that specifying the value null for substitutions produces the source string',['Hello, world!',null,'[#KEY]'],'Hello, world!'],['Test that specifying the value undefined for substitutions produces the source string',['Hello, world!',undefined,'[#KEY]'],'Hello, world!'],['Test that substituting into an empty string produces an empty string',['',{name:'Eric'},'[#KEY]'],''],['Test that substitution of a single token works correctly',
['My name is [#name].',{name:'Eric'},'[#KEY]'],'My name is Eric.'],['Test that multiple substitutions are handled corretly',['My name is [#name], and I am a [#occupation].',{name:'Eric',occupation:'viking'},'[#KEY]'],'My name is Eric, and I am a viking.'],['Test that a custom token naming specifier is handled correctly',['My name is <%name%>, and I am a <%occupation%>.',{name:'Eric',occupation:'viking'},'<%KEY%>'],'My name is Eric, and I am a viking.'],['Test that token naming where token opener and closer are empty strings is handled correcly',['I am name, and I am a occupation.',{name:'Eric',occupation:'viking'},'KEY'],'I am Eric, and I am a viking.'],['Test that default for token naming is [#KEY]',['My name is [#name].',{name:'Eric'}],'My name is Eric.'],['Test that specifying an empty object for substitutions simply produces the source string',['Hello, world!',{}],'Hello, world!'],['Test that the same substitution can be used multiple times',
['My name is [#name]. [#name] is my name. You can call me [#name].',{name:'Eric'}],'My name is Eric. Eric is my name. You can call me Eric.'],['Test that substitution values that contain tokens are not further substituted into',['[#token1][#token2]',{token1:'[#token2]foo',token2:'bar'}],'[#token2]foobar'],['Test that tokens in the source string for which there aren\'t substitutions are left in the source string',['My name is [#name].',{occupation:'viking'}],'My name is [#name].'],['Test that substitutions for which there aren\'t tokens in the source string are ignored',['My name is [#name].',{name:'Eric',occupation:'viking'}],'My name is Eric.'],['Test that specifying an array for substitutions is handled correctly',['My name is [#0], and I am a [#1].',['Eric','viking']],'My name is Eric, and I am a viking.'],['Test that specifying an empty array for substitutions simply produces the source string',['Hello, world!',[]],'Hello, world!'],
['Test that non-string substitution values are correctly coerced to strings',['[#int] [#neg] [#float] [#nan] [#infinity] [#true] [#false] [#obj] [#null] [#undefined]',{int:5,neg:-5,float:5.5,nan:NaN,infinity:Infinity,'true':true,'false':false,obj:new Uize({value:'OBJECT'}),'null':null,'undefined':undefined}],'5 -5 5.5 NaN Infinity true false OBJECT null undefined'],['Test that a string type substitution is treated as a substitutions array with one element',['My name is [#0].','Eric'],'My name is Eric.'],['Test that a number type substitution is treated as a substitutions array with one element',['Pi is approximately [#0].',3.14159265359],'Pi is approximately 3.14159265359.'],['Test that a boolean type substitution is treated as a substitutions array with one element',['It is not [#0] that the Earth is flat.',true],'It is not true that the Earth is flat.'],['Test that substitution keys are case-sensitive, as designed',['My name is [#name], and not [#NAME]!',{name:'Eric',NAME:'Derrick'}],
'My name is Eric, and not Derrick!'],['Test that substitution keys are space-sensitive, as designed',['My name is [#name], and not [# name ]!',{name:'Eric',' name ':'Derrick'}],'My name is Eric, and not Derrick!'],['Test that spaces in the token opener and token closer are significant, as designed',['[name] [ name] [name ] [ name ]',{name:'Eric'},'[ KEY ]'],'[name] [ name] [name ] Eric'],['Test that a token opener containing regular expression special characters is handled correctly',['My name is [^$|{}[]()?.*+\\name].',{name:'Eric'},'[^$|{}[]()?.*+\\KEY]'],'My name is Eric.'],['Test that a token closer containing regular expression special characters is handled correctly',['My name is [name^$|{}[]()?.*+\\].',{name:'Eric'},'[KEY^$|{}[]()?.*+\\]'],'My name is Eric.'],['Test that a substitution key containing regular expression special characters is handled correctly',['My name is [^$|{}[]()?.*+\\].',{'^$|{}[]()?.*+\\':'Eric'},'[KEY]'],'My name is Eric.'],
['Test that the source for substituting into can be a number',[3.14159265359,{'.':','},'KEY'],'3,14159265359'],['Test that the source for substituting into can be a boolean',[true,{ru:'Russia'},'KEY'],'tRussiae'],['Test that the source for substituting into can be an object that implements a value interface',[new Uize({value:'My name is [#name].'}),{name:'Eric'}],'My name is Eric.'],['Test that the source for substituting into can be an array, whose elements will be concatenated',[['[#name]','[#occupation]'],{name:'Eric',occupation:'viking'}],'Eric,viking']]],['Uize.indexIn',[['Test that calling with no parameters produces the result -1',[],-1],['Test that specifying null for the sourceARRAY parameter produces the result -1',[null,null],-1],['Test that specifying undefined for the sourceARRAY parameter produces the result -1',[undefined,undefined],-1],['Test that specifying a number for the sourceARRAY parameter produces the result -1',[5,5],-1],
['Test that specifying a string for the sourceARRAY parameter produces the result -1',['hello','hello'],-1],['Test that specifying a boolean for the sourceARRAY parameter produces the result -1',[true,true],-1],['Test that specifying an empty array for the sourceARRAY parameter produces the result -1',[[],1],-1],['Test that the fromEndBOOL and strictEqualityBOOL parameters are observed correctly',[[0,1,'1','1',1,2],'1',true,false],4],['Test that the strictEqualityBOOL parameter is defaulted to true, as designed',[[0,1,'1','1',1,2],'1',true],3],['Test that the fromEndBOOL parameter is defaulted to false, as designed',[[0,1,'1','1',1,2],'1'],2],['Test that -1 is returned when the value is not found in the source array',[[0,1,'1','1',1,2],'0'],-1]]],['Uize.isIn',[['Test that calling with no parameters produces the result false',[],false],['Test that specifying null for the sourceARRAY parameter produces the result false',[null,null],false],
['Test that specifying undefined for the sourceARRAY parameter produces the result false',[undefined,undefined],false],['Test that specifying a number for the sourceARRAY parameter produces the result false',[5,5],false],['Test that specifying a string for the sourceARRAY parameter produces the result false',['hello','hello'],false],['Test that specifying a boolean for the sourceARRAY parameter produces the result false',[true,true],false],['Test that specifying an empty array for the sourceARRAY parameter produces the result false',[[],1],false],['Test that the strictEqualityBOOL parameter ia observed correctly',[[0,1],'1',false],true],['Test that the strictEqualityBOOL parameter is defaulted to true, as designed',[[0,1],'1'],false],['Test that false is returned when the value is not found in the source array',[[0,1],2],false]]],['Uize.recordMatches',[['Test that specifying the value null for the record produces the result false',[null,{foo:'bar'}],false],
['Test that specifying the value undefined for the record produces the result false',[undefined,{foo:'bar'}],false],['Test that specifying the value null for the match object produces the result true',[{foo:'bar'},null],true],['Test that specifying the value undefined for the match object produces the result true',[{foo:'bar'},undefined],true],['Test that specifying an empty match object produces the result true',[{foo:'bar'},{}],true],['Test that specifying a match object that contains properties that aren\'t in the record produces the result false',[{foo:'bar'},{hello:'world'}],false],['Test that specifying a match object with a property that is in the record but whose value is not the same produces the result false',[{meaningOfLife:42},{meaningOfLife:'dunno'}],false],['Test that specifying a match object with a property that is in the record and whose values is equal but not in a strict equality produces the result false',[{meaningOfLife:42},{meaningOfLife:'42'}],false],
['Test that specifying a match object with a property that is in the record and whose values is equal in a strict equality produces the result true',[{meaningOfLife:42},{meaningOfLife:42}],true],['Test that specifying a match object with multiple properties and that is only a partial match with the record produces the result false',[{foo:'bar',hello:'world',meaningOfLife:42},{foo:'bar',hello:'there',meaningOfLife:42}],false],['Test that specifying a match object with multiple properties and that is a complete match with the record produces the result true',[{foo:'bar',hello:'world',meaningOfLife:42},{foo:'bar',hello:'world',meaningOfLife:42}],true],['Test that properties that are in the record but that are not in the match object are not considered and do not affect the success of the match',[{foo:'bar',hello:'world',meaningOfLife:42},{meaningOfLife:42}],true]]],['Uize.findRecordNo',[['Test that specifying null for the records results in the default number being returned',[null,{},5],5],
['Test that specifying undefined for the records results in the default number being returned',[undefined,{},5],5],['Test that not specifying a default number results in the value -1 being used for default number',[[{foo:'boo'},{foo:'bar'},{foo:'foo'}],{foo:'woo'}],-1],['Test that specifying the value null for default number is treated as a default number of -1',[[{foo:'boo'},{foo:'bar'},{foo:'foo'}],{foo:'woo'},null],-1],['Test that specifying the value undefined for default number is treated as a default number of -1',[[{foo:'boo'},{foo:'bar'},{foo:'foo'}],{foo:'woo'},undefined],-1],['Test that specifying a string value for detault number results in it being coerced to a number',[[{foo:'boo'},{foo:'bar'},{foo:'foo'}],{foo:'woo'},'5'],5],['Test that specifying a boolean value for the default number results in it being coerced to a number',[[{foo:'boo'},{foo:'bar'},{foo:'foo'}],{foo:'woo'},true],1],['Test that specifying an object value for the default number results in it being coerced to a number',
[[{foo:'boo'},{foo:'bar'},{foo:'foo'}],{foo:'woo'},new Uize({value:5})],5],['Test that specifying an object value for the default number that cannot be coerced to a number results in the value -1 being used for the default number',[[{foo:'boo'},{foo:'bar'},{foo:'foo'}],{foo:'woo'},new Uize({value:'blah'})],-1],['Test that the index of the first matching record is returned when the match matches a record',[[{foo:'boo'},{foo:'bar'},{foo:'foo'}],{foo:'bar'}],1],['Test that the value 0 is returned when the value null is specified for the match',[[{foo:'boo'},{foo:'bar'},{foo:'foo'}],null],0]]],['Uize.findRecord',[['Test that specifying null for the records results in the value null being returned',[null,{},5],null],['Test that specifying undefined for the records results in the value null being returned',[undefined,{},5],null],{title:'Test that the first matching record is returned when the match matches a record',test:function(){var _X=[{foo:'boo'},{foo:'bar'},{foo:'foo'}];
return this.expectSameAs(_X[1],Uize.findRecord(_X,{foo:'bar'}));}},{title:'Test that the first record is returned when the value null is specified for the match',test:function(){var _X=[{foo:'boo'},{foo:'bar'},{foo:'foo'}];return this.expectSameAs(_X[0],Uize.findRecord(_X,null));}},{title:'Test that the record for the specified default record number is returned when no matching record is found',test:function(){var _X=[{foo:'boo'},{foo:'bar'},{foo:'foo'}];return this.expectSameAs(_X[2],Uize.findRecord(_X,{foo:'woo'},2));}}]],['Uize.getGuid',[{title:'Test that a string type value is returned, as expected',test:function(){return this.expectNonEmptyString(Uize.getGuid())}},{title:'Test that result is different across ten successive calls',test:function(){var _Y=[];for(var _Z= -1;++_Z<10;)_Y.push(Uize.getGuid());return this.expectNoRepeats(_Y);}}]],['Uize.getPathToLibrary',[]],['Uize.globalEval',[]],['Uize.isInstance',[['Test that calling with no parameters produces the result false',[],false],
['Test that null is not regarded as a Uize subclass instance',null,false],['Test that undefined is not regarded as a Uize subclass instance',undefined,false],['Test that a string is not regarded as a Uize subclass instance','hello',false],['Test that a number is not regarded as a Uize subclass instance',5,false],['Test that a boolean is not regarded as a Uize subclass instance',true,false],['Test that a simple object is not regarded as a Uize subclass instance',{},false],['Test that an array is not regarded as a Uize subclass instance',[],false],['Test that a regular expression is not regarded as a Uize subclass instance',/\d+/,false],['Test that a function is not regarded as a Uize subclass instance',function(){},false],['Test that a Uize class is not regarded as a Uize subclass instance',Uize,false],['Test that a Uize package is not regarded as a Uize subclass instance',Uize.Data,false],['Test that a Uize instance is correctly regarded as a Uize subclass instance',new Uize,true]]],['Uize.clone',[
['Test that cloning the value null produces the value null',null,null],['Test that cloning the value undefined produces the value undefined',undefined,undefined],['Test that cloning an empty string produces an empty string','',''],['Test that cloning a non-empty string is handled correctly','solar','solar'],['Test that cloning the value 0 produces the value 0',0,0],['Test that cloning a negative number is handled correctly',-1,-1],['Test that cloning a positive number is handled correctly',1,1],['Test that cloning the special number value NaN is handled correctly',NaN,NaN],['Test that cloning the special number value Infinity is handled correctly',Infinity,Infinity],['Test that cloning the special number value -Infinity is handled correctly',-Infinity,-Infinity],['Test that cloning the boolean value false produces the value false',false,false],['Test that cloning the boolean value true produces the value true',true,true],_e('Test that cloning an instance of the RegExp object is handled correctly',RegExp,
new RegExp('^\\s+$','gi')),_e('Test that cloning an instance of the Date object is handled correctly',Date,'2001/9/11'),_e('Test that cloning an instance of the String object is handled correctly',String,'solar'),_e('Test that cloning an instance of the Number object is handled correctly',Number,42),_e('Test that cloning an instance of the Boolean object is handled correctly',Boolean,true),['Test that cloning an empty object produces an empty object',{},{}],_e('Test that the clone of an object is not a reference to that object, but is a new object',Object,{}),['Test that cloning a non-empty object produces an identical copy of that object',_a,_a],['Test that cloning an empty array produces an empty array',[[]],[]],_e('Test that the clone of an array is not a reference to that array, but is a new array',Array,[]),['Test that cloning a non-empty array produces an identical copy of that array',[_b],_b],['Test that cloning a complex object data structure is handled correctly',[_c],_c],
['Test that cloning a complex array data structure is handled correctly',[_d],_d],{title:'Test that cloning a function simply returns a reference to that function',test:function(){var _0=function(){};return this.expectSameAs(_0,Uize.clone(_0))}},{title:'Test that cloning a Uize class instance simply returns a reference to that instance',test:function(){var _0=new Uize;return this.expectSameAs(_0,Uize.clone(_0))}},['Test that specifying no parameter is equivalent to cloning the value undefined',[],undefined]]],['Uize.callOn',[{title:'Test that specifying null for the object results in no action',test:function(){var success=true;Uize.callOn(null,function(){success=false});return success;}},{title:'Test that specifying undefined for the object results in no action',test:function(){var success=true;Uize.callOn(undefined,function(){success=false});return success;}},{title:'Test that specifying a value for method that is neither a string nor a function results in no error being produced',test:function(){
var _V=new Uize;Uize.callOn(_V);Uize.callOn(_V,null);Uize.callOn(_V,undefined);Uize.callOn(_V,42);Uize.callOn(_V,true);Uize.callOn(_V,{});Uize.callOn(_V,[]);return true;}},{title:'Test that specifying a function as the method and an instance as the target results in the function being called as an instance method on the instance',test:function(){var _V=new Uize,_n=false;Uize.callOn(_V,function(){_n=this==_V});return _n;}},{title:'Test that when the optional arguments parameter is not specified, the arguments are defaulted to an empty array',test:function(){var _V=new Uize,_n=false;Uize.callOn(_V,function(){_n=arguments.length==0});return _n;}},{title:'Test that when the optional arguments parameter is specified, those arguments are passed in the call correctly',test:function(){var _V=new Uize,_n=false;Uize.callOn(_V,function(){_n=arguments.length==3&&arguments[0]==='foo'&&arguments[1]===42&&arguments[2]===true;},['foo',42,true]);return _n;}},{title:
'Test that specifying the target as an instance and the method as a string does not result in an error being produced when the method is not defined on the instance',test:function(){var _V=new Uize,_1='SOME-BOGUS-METHOD-NAME';delete _V[_1];Uize.callOn(_V,_1);return true;}},{title:'Test that specifying the target as an instance and the method as a string results in the specified method being called as an instance method on the instance',test:function(){var _V=new Uize,_n=false;_V.someSillyMethodName=function(){_n=this==_V&&arguments.length==3&&arguments[0]==='foo'&&arguments[1]===42&&arguments[2]===true;};Uize.callOn(_V,'someSillyMethodName',['foo',42,true]);return true;}},{title:'Test that specifying an array as the target results in the method being called correctly on all elements of the array',test:function(){var _2=[],_3=Uize.subclass(),_4=['foo',42,true],_5=new _3({name:'subTarget0'}),_6=new _3({name:'subTarget1'}),_7=new _3({name:'subTarget2'}),_V=[_5,_6,_7];Uize.callOn(_V,function(){_2.push({
_8:this.get('name'),_9:[].concat.apply([],arguments)});},_4);return this.expect([{_8:'subTarget0',_9:_4},{_8:'subTarget1',_9:_4},{_8:'subTarget2',_9:_4}],_2);}},{title:'Test that specifying an object as the target results in the method being called correctly on all property values of the object',test:function(){var _2=[],_3=Uize.subclass(),_4=['foo',42,true],_5=new _3({name:'subTarget0'}),_6=new _3({name:'subTarget1'}),_7=new _3({name:'subTarget2'}),_V={foo:_5,bar:_6,helloworld:_7};Uize.callOn(_V,function(){_2.push({_8:this.get('name'),_9:[].concat.apply([],arguments)});},_4);return this.expect([{_8:'subTarget0',_9:_4},{_8:'subTarget1',_9:_4},{_8:'subTarget2',_9:_4}],_2);}},{title:'Test that recursion is handled correctly when the target is a complex data structure',test:function(){var _ba=[],_bb=[],_3=Uize.subclass(),_4=['foo',42,true],_bc= -1;function _bd(){var _be='subTarget'+ ++_bc;_ba.push({_8:_be,_9:_4});return new _3({name:_be});}var _V={foo:_bd(),bar:[_bd(),{hello:_bd(),there:{silly:_bd(),
sausage:_bd()},world:_bd()},[_bd(),_bd()]],blah:_bd()};Uize.callOn(_V,function(){_bb.push({_8:this.get('name'),_9:[].concat.apply([],arguments)});},_4);return this.expect(_ba,_bb);}}]],['Uize.fire',[]],['Uize.wire',[]],['Uize.unwire',[]],['Uize.registerProperties',[]],['Uize.get',[]],['Uize.set',[]],['Uize.toggle',[]],['Uize.toString',[]],['Uize.valueOf',[]],['Uize.module',[]],['Uize.subclass',[]]]),{title:'Test the event system for instances and classes',test:[_k('Test that the event system works for instances',true),_k('Test that the event system works for classes',false)]},{title:'Data Module Pattern with Caching Accessor',test:function(){var _W;Uize.module({name:'MyNamespace'});Uize.module({name:'MyNamespace.EngineeringEmployees',builder:function(){var _bf;return function(_bg){if(_bf&& !_bg)return _bf;var _bh=[{firstName:'John',lastName:'Wilkey',department:'engineering'},{firstName:'Nick',lastName:'Arendsen',department:'engineering'},{firstName:'Mark',lastName:'Strathley',department:'engineering'}];
return _bg?_bh:(_bf=_bh);};}});Uize.module({name:'MyNamespace.FinanceEmployees',builder:function(){var _bf;return function(_bg){if(_bf&& !_bg)return _bf;var _bh=[{firstName:'Marie',lastName:'Stevenson',department:'finance'},{firstName:'Craig',lastName:'Pollack',department:'finance'}];return _bg?_bh:(_bf=_bh);};}});Uize.module({name:'MyNamespace.AllEmployees',required:['MyNamespace.EngineeringEmployees','MyNamespace.FinanceEmployees'],builder:function(){var _bf;return function(_bg){if(_bf&& !_bg)return _bf;var _bh=[].concat(MyNamespace.EngineeringEmployees(true),MyNamespace.FinanceEmployees(true));return _bg?_bh:(_bf=_bh);};}});Uize.module({required:'MyNamespace.AllEmployees',builder:function(){_W=Uize.Data.identical(MyNamespace.AllEmployees(),[{firstName:'John',lastName:'Wilkey',department:'engineering'},{firstName:'Nick',lastName:'Arendsen',department:'engineering'},{firstName:'Mark',lastName:'Strathley',department:'engineering'},{firstName:'Marie',lastName:'Stevenson',department:'finance'},
{firstName:'Craig',lastName:'Pollack',department:'finance'}]);}});return _W;}}]});}});